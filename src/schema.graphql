# Type Definitions, typeDefs, Schema
# Scalar types - String, Boolean, Int, Float, ID

type Query {
  users(query: String): [User!]!
  posts(query: String): [Post!]!
  comments: [Comment!]!
  me: User!
  post: Post!
}

type Mutation {
  createUser(newUser: CreateUserInput!): User!
  createPost(newPost: CreatePostInput!): Post!
  createComment(newComment: CreateCommentInput!): Comment!
  deleteUser(id: ID!): User!
  deletePost(id: ID!): Post!
  deleteComment(id: ID!): Comment!
  updateUser(id: ID!, updateOptions: UpdateUserInput!): User!
  updatePost(id: ID!, updateOptions: UpdatePostInput!): Post!
  updateComment(id: ID!, updateOptions: UpdateCommentInput!): Comment!
}

type Subscription {
  comment(postId: ID!): Comment!
  post: PostPayloadSubscription!
}

type PostPayloadSubscription {
  # Tell the UI why it is receiving this object
  operation: String!
  post: PostSubscriptionPayload!
}

input CreateUserInput {
  name: String!
  email: String!
  age: Int
}

input CreatePostInput {
  title: String!
  body: String!
  published: Boolean!
  authorId: ID!
}

input CreateCommentInput {
  text: String!
  authorId: ID!
  postId: ID!
}

input UpdateUserInput {
  name: String
  email: String
  age: Int
}

input UpdatePostInput {
  title: String
  body: String
  published: Boolean
}

input UpdateCommentInput {
  text: String
}

type User {
  id: ID!
  name: String!
  email: String!
  age: Int
  posts: [Post!]!
  comments: [Comment!]!
}

type Post {
  id: ID!
  title: String!
  body: String!
  published: Boolean!
  author: User!
  comments: [Comment!]!
}

type Comment {
  id: ID!
  text: String!
  # data from db will have id in the author (changed to authorId for clarity) field, we use that to establish a relationship between Comment and User
  author: User!
  post: Post!
}

type PostSubscriptionPayload {
  action: String!
  payload: Post!
}